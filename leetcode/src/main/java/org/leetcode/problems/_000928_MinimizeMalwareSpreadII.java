package org.leetcode.problems;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

/**
 * 
 * HARD
 * 
 * @author Alexandros Kokozidis
 *
 */
public class _000928_MinimizeMalwareSpreadII {
	public int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		int minTotal = Integer.MAX_VALUE;
		int index = -1;

		Arrays.sort(initial);

		Queue<int[]> edges = new LinkedList<>();
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) {
				if (graph[i][j] == 1) {
					edges.add(new int[] { i, j });
				}
			}
		}

		outer: for (int removed : initial) {
			WQU wqu = new WQU(n + 1);
			for (int infected : initial) {
				if (infected == removed)
					continue;
				wqu.union(n, infected);
			}
			for (int[] edge : edges) {
				int v = edge[0];
				int w = edge[1];
				if (v == removed || w == removed)
					continue;
				wqu.union(v, w);
				if (wqu.size(wqu.find(n)) >= minTotal)
					continue outer;
			}
			int localTotal = wqu.size(wqu.find(n));
			if (minTotal > localTotal) {
				minTotal = localTotal;
				index = removed;
			}
		}
		return index;
	}

	static class WQU {
		private final int[] id;
		private final int[] sz;

		public WQU(int n) {
			id = new int[n];
			for (int i = 0; i < n; i++)
				id[i] = i;

			sz = new int[n];
			for (int i = 0; i < n; i++)
				sz[i] = 1;
		}

		public int find(int v) {
			validate(v);
			while (id[v] != v) {
				id[v] = id[id[v]];
				v = id[v];
			}
			return v;
		}

		public boolean connected(int v, int w) {
			validate(v);
			validate(w);
			int p = find(v);
			int q = find(w);

			return p == q;
		}

		public void union(int v, int w) {
			validate(v);
			validate(w);

			int p = find(v);
			int q = find(w);

			if (p == q)
				return;

			if (sz[p] >= sz[q]) {
				id[q] = p;
				sz[p] += sz[q];
			} else {
				id[p] = q;
				sz[q] += sz[p];
			}
		}

		public int size(int v) {
			validate(v);
			return sz[v];
		}

		private void validate(int v) {
			if (v < 0 || v >= id.length) {
				throw new IllegalArgumentException(
						"v: " + v + " should be between 0 and " + (id.length - 1));
			}
		}
	}
}
